Act as an expert full-stack software architect. Your task is to generate a comprehensive project plan and initial code structure for a "Personal Subscription Tracker" web application named "SubTrack".

The technology stack is **Angular (v18+)** for the frontend and **.NET 8 (C#)** for the backend.

The application must be secure, scalable, and user-friendly. The default currency for users should be Sri Lankan Rupees (LKR), but the system should support other currencies.

**Backend Requirements (.NET 8):**

1.  **Project Structure:** Create a clean API project structure (e.g., using a Vertical Slice Architecture or a standard Onion Architecture).
2.  **Database:** Design the database schema using **Entity Framework Core**. The key models are `User`, `Subscription`, and `SubscriptionCategory`.
    * `User`: Use ASP.NET Core Identity.
    * `Subscription`: Should include `Id`, `Name`, `Cost`, `Currency` (e.g., "LKR"), `BillingCycle` (enum: Weekly, Monthly, Yearly), `NextBillingDate`, `FirstPaymentDate`, `CategoryId`, and `UserId`.
3.  **API Endpoints:** Define RESTful API endpoints for the following actions. All endpoints must be secure and operate only on the authenticated user's data.
    * `POST /api/auth/register`
    * `POST /api/auth/login`
    * `GET /api/subscriptions` (Get all subscriptions for the user)
    * `POST /api/subscriptions` (Create a new subscription)
    * `PUT /api/subscriptions/{id}` (Update a subscription)
    * `DELETE /api/subscriptions/{id}` (Delete a subscription)
    * `GET /api/dashboard/summary` (Get calculated data like total monthly cost, upcoming renewals)
4.  **Services:**
    * **Authentication:** Use JWT (JSON Web Tokens) for authentication.
    * **Notification Service:** Set up a background job service (using **Hangfire**) that checks for subscriptions renewing within the next 7 days and is designed to send email reminders.

**Frontend Requirements (Angular 18+):**

1.  **Project Structure:** Use the Angular CLI to generate a project with a modular structure (`Core`, `Shared`, `Features` like `Dashboard`, `Subscriptions`).
2.  **UI Components:** Use **Angular Material** for UI components.
3.  **Core Features:**
    * **Dashboard:** A component that displays a summary of total monthly/yearly costs (using `ngx-charts` for a pie or bar chart) and a list of upcoming renewals.
    * **Subscription Management:** A feature module with components to list, create, edit, and delete subscriptions using a reactive form.
    * **User Authentication:** A simple login and registration page that interacts with the backend API.
    * **Notifications:** Implement a toast notification system (e.g., `ngx-toastr`) for UI alerts.
4.  **State Management:** Use RxJS BehaviorSubjects within services for simple state management.

**Deliverables:**

1.  Provide the complete folder and file structure for both the .NET backend and the Angular frontend.
2.  Write the C# code for the EF Core models (`Subscription`, `SubscriptionCategory`), the DbContext, and DTOs (Data Transfer Objects).
3.  Define the API controller class (`SubscriptionsController`) with method signatures for all endpoints.
4.  Provide the `ng generate` commands to create the necessary Angular modules, components, and services.
5.  Write the code for the Angular `subscription.service.ts` to handle HTTP requests to the backend. ,
for front end - 
Act as an expert frontend developer and UI/UX designer specializing in Angular (v18+). Your task is to generate the code for a modern, stylish, and creative frontend for the "SubTrack" personal subscription tracker app.

**Design Vision: "Digital Clarity"**
The aesthetic is a combination of minimalism and glassmorphism, with a focus on a clean user experience. The app must have both a light and dark theme.

**Design System:**
* **Color Palette:**
    * Light Mode BG: `#F8F9FE`
    * Dark Mode BG: `#1A1A1D`
    * Primary Accent: `#4A6CFD`
    * Text: `#1C1C1E` (Primary), `#8A8A8E` (Secondary)
* **Typography (from Google Fonts):**
    * Headings: 'Poppins'
    * Body: 'Inter'
* **Iconography:** Use SVG icons from the 'Lucide Icons' set.
* **UI Library:** Use Angular Material, but heavily customize the theme with the styles above.

**Component Generation Request:**

1.  **Global Styles (`styles.scss`):**
    * Set up the CSS variables for the full color palette (both light and dark modes controlled by a `.dark-theme` class on the body).
    * Import the 'Poppins' and 'Inter' Google Fonts.
    * Define the base body styles for typography and background colors.
    * Create a reusable `.glass-card` CSS class that implements the glassmorphism effect (background-blur, transparent background, rounded corners, subtle border).

2.  **Dashboard Component (`dashboard.component.ts|html|scss`):**
    * Create a two-column layout using CSS Grid.
    * The left column should contain a `div` with the `.glass-card` class for the "Total Monthly Spend" and another for a donut chart (using `ngx-charts`).
    * The right column should contain a list of upcoming renewals, also using the `.glass-card` style for each item. Each item should have a placeholder for a service logo, the name, cost, and due date.
    * Include a Material Button (`mat-flat-button`) with the primary accent color for "Add Subscription".

3.  **Subscription List Component (`subscription-list.component.ts|html|scss`):**
    * Generate a list of subscriptions. Each item in the list should be a custom-styled card (NOT a `mat-card` by default) that is full-width.
    * The card should use Flexbox to align items: a logo on the left, name/category in the middle, and cost/date on the right.
    * Add a subtle hover effect (e.g., `transform: scale(1.02)`).

4.  **Add/Edit Subscription Form (`subscription-form.component.ts|html|scss`):**
    * Design this to be opened in an Angular Material Dialog.
    * The form should use reactive forms (`FormGroup`).
    * Use `<mat-form-field>` with the "filled" appearance for inputs: Name, Cost, First Payment Date (`mat-datepicker`).
    * For "Billing Cycle," use `<mat-button-toggle-group>` with options for 'Weekly', 'Monthly', and 'Yearly'.
    * The default currency should be 'LKR'.

Please provide the complete, copy-pasteable HTML and SCSS code for these components based on this design vision.
